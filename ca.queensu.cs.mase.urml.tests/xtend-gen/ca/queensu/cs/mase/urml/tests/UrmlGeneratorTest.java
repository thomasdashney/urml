package ca.queensu.cs.mase.urml.tests;

import ca.queensu.cs.mase.urml.tests.UrmlInjectorProviderCustom;
import com.google.inject.Inject;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.junit4.InjectWith;
import org.eclipse.xtext.junit4.XtextRunner;
import org.eclipse.xtext.xbase.compiler.CompilationTestHelper;
import org.eclipse.xtext.xbase.lib.Exceptions;
import org.eclipse.xtext.xbase.lib.Extension;
import org.junit.Test;
import org.junit.runner.RunWith;

@RunWith(XtextRunner.class)
@InjectWith(UrmlInjectorProviderCustom.class)
@SuppressWarnings("all")
public class UrmlGeneratorTest {
  @Inject
  @Extension
  private CompilationTestHelper _compilationTestHelper;
  
  @Test
  public void testRootCapsule() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("model Test {");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("root capsule Handshake {");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("active proctype Handshake() {");
      _builder_1.newLine();
      _builder_1.append("}");
      _builder_1.newLine();
      this._compilationTestHelper.assertCompilesTo(_builder, _builder_1);
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void testCapsuleInstances() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("model Test {");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("root capsule Handshake {");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("capsuleInstance sender : Originator");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("capsule Originator {");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("capsuleInstance test1 : Test");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("capsuleInstance test2 : Test");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("capsule Test {}");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("active proctype Handshake() {");
      _builder_1.newLine();
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.append("active proctype sender() {");
      _builder_1.newLine();
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.append("active proctype sender_test1() {");
      _builder_1.newLine();
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.append("active proctype sender_test2() {");
      _builder_1.newLine();
      _builder_1.append("}");
      _builder_1.newLine();
      this._compilationTestHelper.assertCompilesTo(_builder, _builder_1);
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void testSimpleConnectors() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("model handshake {");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("root capsule Handshake {");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("capsuleInstance sender : Originator");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("capsuleInstance receiver : Receiver");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("connector sender.hand and receiver.hand");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("port internalHand : HandshakeProtocol");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("connector internalHand and receiver.hand");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("capsule Originator {");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("external port hand : HandshakeProtocol");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("capsule Receiver {");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("external port ~hand : HandshakeProtocol");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("protocol HandshakeProtocol {");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("chan sender.hand_receiver.hand = [0] of mtype;");
      _builder_1.newLine();
      _builder_1.append("chan Handshake.internalHand_receiver.hand = [0] of mtype;");
      _builder_1.newLine();
      _builder_1.newLine();
      _builder_1.append("active proctype Handshake() {");
      _builder_1.newLine();
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.append("active proctype sender() {");
      _builder_1.newLine();
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.append("active proctype receiver() {");
      _builder_1.newLine();
      _builder_1.append("}");
      _builder_1.newLine();
      this._compilationTestHelper.assertCompilesTo(_builder, _builder_1);
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void testRelayConnectors() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("model handshake {");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("root capsule OuterCapsule {");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("capsuleInstance innerCapsule1 : InnerCapsule1");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("capsuleInstance innerCapsule2 : InnerCapsule2");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("connector innerCapsule1.externPort and innerCapsule2.externPort");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("capsule InnerCapsule1 {");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("capsuleInstance nestedCapsule : NestedCapsule1");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("external port ~externPort : TestProtocol");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("connector externPort and nestedCapsule.nestedPort");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("capsule NestedCapsule1 {");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("external port nestedPort : TestProtocol");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("capsule InnerCapsule2 {");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("capsuleInstance nestedCapsule : NestedCapsule2");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("external port externPort : TestProtocol");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("connector externPort and nestedCapsule.nestedPort");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("capsule NestedCapsule2 {");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("external port ~nestedPort : TestProtocol");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("protocol TestProtocol {");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("chan innerCapsule1_nestedCapsule.nestedPort_innerCapsule2_nestedCapsule.nestedPort = [0] of mtype;");
      _builder_1.newLine();
      _builder_1.newLine();
      _builder_1.append("active proctype OuterCapsule() {");
      _builder_1.newLine();
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.append("active proctype innerCapsule1() {");
      _builder_1.newLine();
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.append("active proctype innerCapsule1_nestedCapsule() {");
      _builder_1.newLine();
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.append("active proctype innerCapsule2() {");
      _builder_1.newLine();
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.append("active proctype innerCapsule2_nestedCapsule() {");
      _builder_1.newLine();
      _builder_1.append("}");
      _builder_1.newLine();
      this._compilationTestHelper.assertCompilesTo(_builder, _builder_1);
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void testAttributes() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("model handshake {");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("root capsule RootCapsule {");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("attribute int testAttribute1");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("attribute int testAttribute2 := 1");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("capsuleInstance secondCapsule : SecondCapsule");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("capsule SecondCapsule {");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("attribute bool testAttribute1 := true");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("active proctype RootCapsule() {");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("int testAttribute1");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("int testAttribute2 = 1");
      _builder_1.newLine();
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.append("active proctype secondCapsule() {");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("bool testAttribute1 = true");
      _builder_1.newLine();
      _builder_1.append("}");
      _builder_1.newLine();
      this._compilationTestHelper.assertCompilesTo(_builder, _builder_1);
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void testHandshake() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("/**");
      _builder.newLine();
      _builder.append(" ");
      _builder.append("* A simple example that consists of a producer and a consumer of a message.");
      _builder.newLine();
      _builder.append(" ");
      _builder.append("*/");
      _builder.newLine();
      _builder.append("model handshake {");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("root capsule Handshake {");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("capsuleInstance sender : Originator");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("capsuleInstance receiver : Receiver");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("connector sender.hand and receiver.hand");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("capsule Originator {");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("external port hand : HandshakeProtocol");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("logPort logger");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("stateMachine {");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("state start");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("final state end");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("transition init : initial -> start {");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("transition doHandShake : start -> end {");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("action {");
      _builder.newLine();
      _builder.append("\t\t\t\t\t");
      _builder.append("send hand.shake()");
      _builder.newLine();
      _builder.append("\t\t\t\t\t");
      _builder.append("log logger with \"sent a handshake\"");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("}   ");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("capsule Receiver {");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("external port ~hand : HandshakeProtocol");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("logPort logger");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("stateMachine {");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("state start");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("final state end");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("transition init : initial -> start {");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("transition receiveHandshake : start -> end {");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("triggeredBy hand.shake()");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("action {");
      _builder.newLine();
      _builder.append("\t\t\t\t\t");
      _builder.append("log logger with \"received a handshake\"");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("protocol HandshakeProtocol {");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("outgoing {");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("shake()");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("chan sender.hand_receiver.hand = [0] of mtype;");
      _builder_1.newLine();
      _builder_1.append("mtype = {shake}");
      _builder_1.newLine();
      _builder_1.newLine();
      _builder_1.append("active proctype Handshake() {");
      _builder_1.newLine();
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.append("active proctype sender() {");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("goto start");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("start:");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("if");
      _builder_1.newLine();
      _builder_1.append("\t\t\t");
      _builder_1.append("::(true)");
      _builder_1.newLine();
      _builder_1.append("\t\t\t\t");
      _builder_1.append("sender.hand_receiver.hand!shake");
      _builder_1.newLine();
      _builder_1.append("\t\t\t\t");
      _builder_1.append("printf(\"(unknown capsule): logging to logger with: sent a handshake\");");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("fi");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("end:");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("goto process_termination");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("process_termination: skip");
      _builder_1.newLine();
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.append("active proctype receiver() {");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("goto start");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("start:");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("if");
      _builder_1.newLine();
      _builder_1.append("\t\t\t");
      _builder_1.append("::(sender.hand_receiver.hand?shake)");
      _builder_1.newLine();
      _builder_1.append("\t\t\t\t");
      _builder_1.append("printf(\"(unknown capsule): logging to logger with: received a handshake\");");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("fi");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("end:");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("goto process_termination");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("process_termination: skip");
      _builder_1.newLine();
      _builder_1.append("}");
      _builder_1.newLine();
      this._compilationTestHelper.assertCompilesTo(_builder, _builder_1);
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void testFailures() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("model ConsumerProducer { ");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("root capsule ConsumerProducer {");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("capsuleInstance c : Consumer");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("capsuleInstance p : Producer");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("capsuleInstance b : BoundedBuffer");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("connector c.toGet and b.consumer ");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("connector p.toPut and b.producer");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("capsule Consumer {");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("external port toGet : BufferProtocol");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("logPort logger");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("stateMachine {");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("state single");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("transition : initial -> single {");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("transition : single -> single {");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("triggeredBy toGet.get(int toDisplay)");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("action {");
      _builder.newLine();
      _builder.append("\t\t\t\t\t");
      _builder.append("log logger with toDisplay");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("capsule Producer {");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("external port toPut : BufferProtocol");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("stateMachine {");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("state single {");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("entry {");
      _builder.newLine();
      _builder.append("\t\t\t\t\t");
      _builder.append("var int x := 1");
      _builder.newLine();
      _builder.append("\t\t\t\t\t");
      _builder.append("while (x < 8) {");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t");
      _builder.append("send toPut.put(x)");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t");
      _builder.append("x := x + 1");
      _builder.newLine();
      _builder.append("\t\t\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("transition : initial -> single {");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("capsule BoundedBuffer {");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("attribute int a := 0");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("attribute int b := 0");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("attribute int c := 0");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("attribute int d := 0");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("attribute int e := 0");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("external port ~consumer : BufferProtocol");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("external port ~producer : BufferProtocol");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("stateMachine {");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("state zero");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("state one");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("state two");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("state three");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("state four");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("state five");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("transition init : initial -> zero {");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("transition : zero -> one {");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("triggeredBy producer.put(int a_)");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("action {");
      _builder.newLine();
      _builder.append("\t\t\t\t\t");
      _builder.append("a := a_");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("transition : one -> two {");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("triggeredBy producer.put(int b_)");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("action {");
      _builder.newLine();
      _builder.append("\t\t\t\t\t");
      _builder.append("b := b_");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("transition : two -> three {");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("triggeredBy producer.put(int c_)");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("action {");
      _builder.newLine();
      _builder.append("\t\t\t\t\t");
      _builder.append("c := c_");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("transition : three -> four {");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("triggeredBy producer.put(int d_)");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("action {");
      _builder.newLine();
      _builder.append("\t\t\t\t\t");
      _builder.append("d := d_");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("transition : four -> five {");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("triggeredBy producer.put(int e_)");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("action {");
      _builder.newLine();
      _builder.append("\t\t\t\t\t");
      _builder.append("e := e_");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("transition : five -> four {");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("action {");
      _builder.newLine();
      _builder.append("\t\t\t\t\t");
      _builder.append("send consumer.get(e)");
      _builder.newLine();
      _builder.append("\t\t\t\t\t");
      _builder.append("e := 0");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("transition : four -> three {");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("action {");
      _builder.newLine();
      _builder.append("\t\t\t\t\t");
      _builder.append("send consumer.get(d)");
      _builder.newLine();
      _builder.append("\t\t\t\t\t");
      _builder.append("d := 0");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("transition : three -> two {");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("action {");
      _builder.newLine();
      _builder.append("\t\t\t\t\t");
      _builder.append("send consumer.get(c)");
      _builder.newLine();
      _builder.append("\t\t\t\t\t");
      _builder.append("c := 0");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("transition : two -> one {");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("action {");
      _builder.newLine();
      _builder.append("\t\t\t\t\t");
      _builder.append("send consumer.get(b)");
      _builder.newLine();
      _builder.append("\t\t\t\t\t");
      _builder.append("b := 0");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("transition : one -> zero {");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("action {");
      _builder.newLine();
      _builder.append("\t\t\t\t\t");
      _builder.append("send consumer.get(a)");
      _builder.newLine();
      _builder.append("\t\t\t\t\t");
      _builder.append("a := 0");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("protocol BufferProtocol {");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("incoming {");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("get(int data)");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("outgoing {");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("put(int data)");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("}");
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("chan sender.hand_receiver.hand = [0] of mtype;");
      _builder_1.newLine();
      _builder_1.append("mtype = {shake}");
      _builder_1.newLine();
      _builder_1.newLine();
      _builder_1.append("active proctype Handshake() {");
      _builder_1.newLine();
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.append("active proctype sender() {");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("goto start");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("start:");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("if");
      _builder_1.newLine();
      _builder_1.append("\t\t\t");
      _builder_1.append("::(true)");
      _builder_1.newLine();
      _builder_1.append("\t\t\t\t");
      _builder_1.append("sender.hand_receiver.hand!shake");
      _builder_1.newLine();
      _builder_1.append("\t\t\t\t");
      _builder_1.append("printf(\"(unknown capsule): logging to logger with: sent a handshake\");");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("fi");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("end:");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("goto process_termination");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("process_termination: skip");
      _builder_1.newLine();
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.append("active proctype receiver() {");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("goto start");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("start:");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("if");
      _builder_1.newLine();
      _builder_1.append("\t\t\t");
      _builder_1.append("::(sender.hand_receiver.hand?shake)");
      _builder_1.newLine();
      _builder_1.append("\t\t\t\t");
      _builder_1.append("printf(\"(unknown capsule): logging to logger with: received a handshake\");");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("fi");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("end:");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("goto process_termination");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("process_termination: skip");
      _builder_1.newLine();
      _builder_1.append("}");
      _builder_1.newLine();
      this._compilationTestHelper.assertCompilesTo(_builder, _builder_1);
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
}
